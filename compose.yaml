##################################################################################################
# This Compose file is intended to setup a development environment for the Labspace infrastructure,
# NOT for the development of Labspace content.
#
# If you are trying to develop a Labspace, use the `compose.content-dev.yaml` file.
##################################################################################################
services:
  configurator:
    build: ./components/configurator
    use_api_socket: true
    volumes:
      - content:/project
      - docker-creds:/docker-creds
      - support-vscode-extension:/etc/support-extension
    environment:
      DEV_MODE: true
    develop:
      watch:
        - path: ./components/configurator
          action: rebuild

  interface-api:
    build:
      context: ./components/interface
      target: server-dev
    volumes:
      - ./sample-content-repo:/project
      - type: volume
        source: support-vscode-extension
        target: /etc/cmd-executor/private-key
        volume:
          subpath: private-key
      - type: volume
        source: support-vscode-extension
        target: /etc/cmd-executor/socket
        volume:
          subpath: socket
    environment:
      CONTENT_DEV_MODE: true
    depends_on:
      workspace:
        condition: service_started
      configurator:
        condition: service_completed_successfully
    restart: unless-stopped
    develop:
      watch:
        - path: ./components/interface/api/src
          action: sync
          target: /usr/local/app/src
        - path: ./components/interface/api/package-lock.json
          action: rebuild

  interface-client:
    build:
      context: ./components/interface
      target: client-dev
    ports:
      - 5173:5173
    develop:
      watch:
        - path: ./components/interface/client/src
          action: sync
          target: /usr/local/app/src
        - path: ./components/interface/client/package-lock.json
          action: rebuild

  # This service is not running anything, but simply building the extension
  # and allowing it to be an additional build context for the workspace service
  vscode-extension:
    build: ./components/support-vscode-extension

  workspace:
    build: 
      context: ./components/workspace/base
      additional_contexts:
        extension: service:vscode-extension
    depends_on:
      configurator:
        condition: service_completed_successfully
      socket-proxy:
        condition: service_started
    ports:
      - 8085:8085 # For the IDE itself
      - 3000:3000 # For the Node application running in the IDE
    volumes:
      - socket-proxy:/var/run
      - docker-creds:/docker-creds
      - ./sample-content-repo:/home/coder/project
      - type: volume
        source: support-vscode-extension
        target: /etc/cmd-executor/public-key
        volume:
          subpath: public-key
      - type: volume
        source: support-vscode-extension
        target: /etc/cmd-executor/socket
        volume:
          subpath: socket
    develop:
      watch:
        - path: ./components/workspace
          action: rebuild

  host-republisher:
    build:
      context: ./components/host-port-republisher
      target: dev
    volumes:
      - socket-proxy:/var/run
    network_mode: service:workspace
    environment:
      LABEL_FILTER: labspace-resource=true
    depends_on:
      - workspace
      - socket-proxy
    develop:
      watch:
        - path: ./src
          action: sync
          target: /usr/local/app/src

  workspace-cleaner:
    build: ./components/workspace-cleaner
    volumes:
      - socket-proxy:/var/run
    environment:
      LABEL_FILTER: labspace-resource=true
    depends_on:
      - socket-proxy
    develop:
      watch:
        - path: ./components/workspace-cleaner
          action: rebuild

  socket-proxy:
    image: mikesir87/docker-socket-proxy:v1.2.1
    pull_policy: always
    volumes:
      - socket-proxy:/tmp/proxy
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DEBUG_LOGS: "true"
      CONFIG_DATA: |
        mutators:
          # Remap the project directory to the labspace content volume, since the project
          # is running out of a volume.
          - type: mountPath
            from: /home/coder/project
            to: labspace-content

          # If requests to use the Docker Socket are used (such as Testcontainers),
          # use the proxied one to ensure permissions, remappings, etc. are applied
          - type: mountPath
            from: /var/run/docker.sock
            to: labspace-socket-proxy/docker.sock

          # Add labels to all newly created objects
          - type: addLabels
            labels:
              labspace-resource: "true"

          - type: addToNetwork
            networks:
              - labspace
        gates:
          - type: mountSource
            allowedSources:
              - labspace-content
              - labspace-socket-proxy
              - buildx_buildkit_default_state
              - label:labspace-resource=true

        responseFilters:
          # Only return objects with the labels we mutated on
          - type: labelFilter
            objectsToFilter:
              - containers
              - volumes
              - networks
            requiredLabels:
              labspace-resource: "true"
      LISTEN_SOCKET_PATH: /tmp/proxy/docker.sock

volumes:
  socket-proxy:
    name: labspace-socket-proxy
  content:
    name: labspace-content
  docker-creds:
  support-vscode-extension:

networks:
  default:
    name: labspace
